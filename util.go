package main

import (
	"fmt"
	"regexp"
)

// quoteSchemaAndTable puts quotes around the schema and the table name in an index or 
// constraint definition generated by Postgres.
func quoteSchemaAndTable(definition string, schema1 string, table string) string {
	// Contrary to the name of this method, we are not really modifying the schema because we are 
	// passing the same schema name twice.
	// We are just taking advantage of the side-effect of this method that quotes the schema
	// and table name
	return modifySchema(definition, schema1, schema1, table)
}

// modifySchema changes the schema name in index and constraint definitions generated
// by Postgres.  The output always has the schema and table in quotes.
func modifySchema(definition string, schema1 string, schema2 string, table string) string {
	regexpStr := fmt.Sprintf(` "?%s"?."?%s"? `, schema1, table)
	regex := regexp.MustCompile(regexpStr)
	newDefinition := regex.ReplaceAllString(
		definition,
		fmt.Sprintf(` "%s"."%s" `, schema2, table))
    return newDefinition
}
