package main

import (
	"fmt"
	"regexp"
)

// quoteSchemaAndTable puts quotes around the schema and the object name found in 
// an index or constraint definition generated by Postgres.
func quoteSchemaAndObject(definition string, prefix string, schema1 string, objectName string) string {
	
	// Contrary to the name of the below method, we are not really modifying the 
	// schema because we are passing the same schema name twice.
	// We are just taking advantage of the side-effect of this method that quotes 
	// the schema and object name
	return modifySchema(definition, prefix, schema1, schema1, objectName)
}

// modifySchema changes the schema name in index and constraint definitions generated
// by Postgres.  The output always has the schema and object name in quotes.
func modifySchema(definition string, prefix string, schema1 string, schema2 string, table string) string {
	regexpStr := fmt.Sprintf(`%s "?%s"?."?%s"? `, prefix, schema1, table)
	regex := regexp.MustCompile(regexpStr)
	newDefinition := regex.ReplaceAllString(
		definition,
		fmt.Sprintf(`%s "%s"."%s" `, prefix, schema2, table))
    return newDefinition
}
